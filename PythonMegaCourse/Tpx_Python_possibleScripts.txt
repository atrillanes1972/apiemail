============== References =======================
https://pythonhowtoprogram.com/how-to-remove-files-older-than-7-days-using-python-script/

https://geekflare.com/python-delete-files/

https://stackoverflow.com/questions/12485666/python-deleting-all-files-in-a-folder-older-than-x-days

=======================================================


for dirpath, dirnames, files in os.walk('.', topdown=False):
    print(f'Found directory: {dirpath}')
    for file_name in files:
        print(file_name)

=========================================================

import os 
import datetime
import glob
path = 'enter_path_here'

today = datetime.datetime.today()#gets current time
os.chdir(path) #changing path to current path(same as cd command)

#we are taking current folder, directory and files 
#separetly using os.walk function
for root,directories,files in os.walk(path,topdown=False): 
    for name in files:
        #this is the last modified time
        t = os.stat(os.path.join(root, name))[8] 
        filetime = datetime.datetime.fromtimestamp(t) - today

        #checking if file is more than 7 days old 
        #or not if yes then remove them
        if filetime.days <= -7:
            print(os.path.join(root, name), filetime.days)
            os.remove(os.path.join(root, name))
    
=============================================================
import os
import sys
import datetime

#Test for logging function
logging_path= "/tmp/deldir/"#'Enter your log directory path here'

#making a log directory at given path(if exists then it will skip)
if os.path.isdir(logging_path):
    print("Directory already exists")
else:
    os.mkdir(logging_path)
    print("Directory created.")

#creating a log file with date
file=open(logging_path+datetime.datetime.today().strftime('%d-%m-%Y')+'.txt','a')

def del_older_files(directory):
  N=90 # Enter number of old file you want to delete
  if not os.path.exists(directory):# if input path not exist then it will show below error
    print("Please provide valid path")
    sys.exit(1)
  if os.path.isfile(directory):# if the given file path is file then it will show below error
    print("Please provide dictionary path")
    sys.exit(2)
  today=datetime.datetime.now()# it will get currunt datetime and transfer to variable(today)
  for each_file in os.listdir(directory):
    each_file_path=os.path.join(directory,each_file)
    if os.path.isfile(each_file_path):
      file_cre_date=datetime.datetime.fromtimestamp(os.path.getctime(each_file_path))# Here, fortimestamp will get the date of file created 
      # Testing the date settings, line below is temp disabled
      #dif_days=(today-file_cre_date).days
      dif_days=(today)
      if dif_days:# Testing for settings 'now',line below is temp disabled.
      #if dif_days > N:# if the age(N) of file is older then 90 days then conditions becomes True and remove that file
        #file.write(os.path.join(root, name)+' created '+str(dif_days)+' days ago\n')
        currentdir = os.getcwd()
        os.remove(each_file_path)
        os.chdir(logging_path)
        file.write(os.path.join(directory,each_file)+' created '+str(dif_days)+' days ago\n')
        os.chdir(currentdir)
        print(each_file_path,dif_days)

# Config file for directory to process
with open('/tmp/dirprocess.txt', 'r') as f:  # Open file for read
    for directory in f:           # Read line-by-line,contains dir each line
        directory = directory.strip()
        del_older_files(directory)

===================================================================
Note: Possible archiving function
===================================================================

import tarfile

files = ["words1.txt", "words2.txt", "words3.txt", "words4.txt"]
archive = "archive.tar.gz"

with tarfile.open(archive, "w:gz") as tar:
    for file in files:
        tar.add(file)  # can also be dir (added recursively), symlink, etc

    print(f"archive contains: {tar.getmembers()}")

======================================================================